#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define NAV 3
#define ADJ 4
#define GAME  5

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
			bindings = <
				&kp TAB   	   &kp Q       &kp W    &kp E   &kp R    &kp T         		   		 &kp Y    	   &kp U    &kp I     &kp O    &kp P          &kp BSLH
				&kp BSPC  	   &kp A	   &kp S    &kp D   &kp F    &kp G             	         &kp H     	   &kp J    &kp K     &kp L    &lt NAV SEMI   &kp SQT
				&mt LSHFT LPAR &mt LCTRL Z &kp X    &kp C   &kp V    &kp B                       &kp N         &kp M    &kp COMMA &kp DOT  &mt RCTRL FSLH &mt RSHFT RPAR
										   &kp LALT &gresc &kp LGUI &lt LWR RET &kp SPACE &kp RET &lt RSE SPACE &kp RGUI &kp N0   &tog GAME
            >;
        };
        lower_layer {
			bindings = <
				&kp TILDE &kp N1     &none  &none     &kp PRCNT &none                  &none    &none &kp UNDER &none &none &none
				&kp DEL   &kp AT     &none  &none     &none     &kp DLLR      		   &kp HASH &none &none     &none &none &none
				&kp LBKT  &kp LC(Z)  &none  &kp CARET &none     &kp EXCL               &none    &none &none     &none &none &kp RBKT
									 &kp LT &kp GT    &mo ADJ   &none    &none &none  &none    &none &none     &none
            >;
        };
        raise_layer {
				bindings = <
				&none     &none    &none &none &none &none        	 	&kp KP_MINUS &kp N7   	&kp N8 &kp N9  &none     &none
				&kp BSPC  &kp AMPS &none &none &none &none      	 	&kp ASTRK    &kp N4   	&kp N5 &kp N6  &kp EQUAL &none
				&kp LBRC  &none    &none &none &none &none           	&kp PLUS     &kp N1   	&kp N2 &kp N3  &none     &kp RBRC
								&none &none &none &none &none &none  &none        &mo ADJ    &kp N0 &kp DOT          
            >;
        };
        navigation_layer {
			bindings = <
				&none &none &none &none &none &none        		&none &kp HOME &kp UP   &kp END   &none &none
				&none &none &none &none &none &none      		&none &kp LEFT &kp DOWN &kp RIGHT &none &none
				&none &none &none &none &none &none             &none &none    &none    &none     &none &none
							&none &none &none &none &none &none &none &none    &none    &none        
            >;
        };
        adjust_layer {
			bindings = <
					&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &none &none &none  &none &none &none &none &none &none
					&none &none &bt BT_PRV &none &bt BT_NXT &none      		&none &none &kp N1 &none &none &none
					&none &none &none &none &none &none             &none &none &none &none &none &none
								&bootloader &reset &none &none &none &none &none &none &reset &bootloader     
            >;
		};
		gaming_layer {
			bindings = <
				&kp TAB   	   &kp Q       &kp W    &kp E   &kp R    &kp T         		   &kp Y    	 &kp U    &kp I     &kp O    &kp P          &kp BSLH
				&kp BSPC  	   &kp A	   &kp S    &kp D   &kp F    &kp G             	   &kp H     	 &kp J    &kp K     &kp L    &lt NAV SEMI   &kp SQT
				&kp LSHFT 	   &kp Z 	   &kp X    &kp C   &kp V    &kp B                 &kp N         &kp M    &kp COMMA &kp DOT  &kp FSLH &mt RSHFT RPAR
										&kp LALT &kp ESC &kp LGUI &kp RET &kp SPACE &kp RET &lt RSE SPACE &kp RGUI 	&kp N0   &tog GAME
            >;
		};
    };
};


//Default corne keymap
// /*
//  * Copyright (c) 2020 The ZMK Contributors
//  *
//  * SPDX-License-Identifier: MIT
//  */

// #include <behaviors.dtsi>
// #include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/bt.h>

// / {
//         keymap {
//                 compatible = "zmk,keymap";

//                 default_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
// //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
//                         bindings = <
//    &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
//    &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
//    &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
//                   &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
//                         >;
//                 };
//                 lower_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
// //                    | GUI |     | SPC |   | ENT |     | ALT |
//                         bindings = <
//    &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
//    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
//    &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
//                           	        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
//                         >;
//                 };

//                 raise_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
// //                    | GUI |     | SPC |   | ENT |     | ALT |
//                         bindings = <
//    &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
//    &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
//    &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
//                     	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
//                         >;
//                 };
//         };
// };
